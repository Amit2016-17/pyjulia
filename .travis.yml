language: python
os:
  - linux
python:
  - "2.7"
  - "3.6"
env:
  matrix:
    - JULIA_VERSION=0.6.4 CROSS_VERSION=1
    - JULIA_VERSION=1.0
    - JULIA_VERSION=nightly
  global:
    - TOXENV=py
    - PYJULIA_TEST_INCOMPATIBLE_PYTHONS=/usr/bin/python2
matrix:
  # Python environment is not functional on OS X
  include:
      - language: generic
        env:
          - PYTHON=python2
          - JULIA_VERSION=1.0
          # - JULIA_VERSION=nightly
        os: osx
      - language: generic
        env:
          - PYTHON=python2
          - JULIA_VERSION=0.6.4
          - CROSS_VERSION=1
        os: osx
      - language: generic
        env:
          - PYTHON=python3
          - PYJULIA_TEST_INCOMPATIBLE_PYTHONS=python2
          - JULIA_VERSION=1.0
          # - JULIA_VERSION=nightly
        os: osx
      - language: generic
        env:
          - PYTHON=python3
          - PYJULIA_TEST_INCOMPATIBLE_PYTHONS=python2
          - JULIA_VERSION=0.6.4
          - CROSS_VERSION=1
        os: osx

      # Upload the package to `test.pypi.org` when there is a push to
      # `release/test` branch:
      - stage: "Test deploy"
        python: "3.6"
        env: []
        deploy:
          provider: pypi
          server: https://test.pypi.org/legacy/
          user: tkf
          password:
            secure: dHo58o6r/V2QvsCOoPwGxwn8gEKfeUXFpYCtYXmqH/MPFOqEq2sXHQJ0v4CsFciwYqLnFNsNBpn0k6gvzmFkmulux4ELs33+noTgPRXNLNYmQqW1WqYHKGxv76c/olN4X17vvFafsNXB50MzdZuH5zMO9NcG36c86/UlT42L+ek=
          distributions: "sdist bdist_wheel"
          on:
            branch: release/test
            repo: JuliaPy/pyjulia
        if: branch = release/test
        before_script: skip
        script: skip
        after_success: skip

      # Test the package uploaded to `test.pypi.org`:
      - stage: "Test upload"
        if: branch = release/test OR branch = upload/test
        python: "3.6"
        env:
          - JULIA_VERSION=1.0
        before_script:
          - ./ci/install-julia.sh "$JULIA_VERSION"
          - pip install --quiet tox
        script:
          - (cd ci/test-upload && tox)
        after_script:
          - cat ci/test-upload/.tox/py/log/pytest.log
        after_success: skip

  allow_failures:
    - env: JULIA_VERSION=nightly
branches:
  only:
    - master
    - release/test
    - upload/test
notifications:
  email: false
before_script:
  - echo ./ci/install-julia.sh "$JULIA_VERSION"
  - ./ci/install-julia.sh "$JULIA_VERSION"
  - if [ "$TRAVIS_OS_NAME" = "osx" -a "$PYTHON" = "python3" ]; then brew update; brew upgrade python || echo "Ignoring errors..."; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" -a "$PYTHON" = "python2" ]; then brew update; brew list python@2 &>/dev/null || brew install python@2 || echo "Ignoring errors..."; fi
  # Ignoring errors from brew since it may actually be OK to do so.
  # Following which command will catch installation failure:
  - PYTHON=${PYTHON:-python}
  - which $PYTHON
  - $PYTHON -m pip --version
  - $PYTHON -m pip install --quiet tox coveralls
  - $PYTHON ci/install_pycall.py
script:

  # Point PYJULIA_TEST_INCOMPATIBLE_PYTHONS to incompatible Python
  # executable (see: test/test_compatible_exe.py).
  - if [ "$PYJULIA_TEST_INCOMPATIBLE_PYTHONS" = "$PYTHON" ]; then
      PYJULIA_TEST_INCOMPATIBLE_PYTHONS="";
    elif ! which "$PYJULIA_TEST_INCOMPATIBLE_PYTHONS"; then
      PYJULIA_TEST_INCOMPATIBLE_PYTHONS="";
    fi
  - echo "$PYJULIA_TEST_INCOMPATIBLE_PYTHONS"

  # "py,py27" below would be redundant when the main interpreter is
  # Python 2.7 but it simplifies the CI setup.
  - if [ "$CROSS_VERSION" = "1" ]; then
    $PYTHON -m tox -e py,py27;
    fi
  - if [ "$CROSS_VERSION" = "1" ]; then
    cat .tox/py/log/pytest.log;
    fi
  - if [ "$CROSS_VERSION" = "1" ]; then
    cat .tox/py27/log/pytest.log;
    fi

  - PYJULIA_TEST_REBUILD=yes $PYTHON -m tox -- --cov=julia
  - cat .tox/py/log/pytest.log

after_success:
  - .tox/py/bin/coverage combine .coverage
  - coveralls
